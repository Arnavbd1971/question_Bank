# Generated by Django 4.2.3 on 2023-07-27 21:48

import core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('idname', models.CharField(max_length=250, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=250)),
                ('email', models.EmailField(max_length=250)),
                ('phone', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='Invalid phone number', regex='^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$')])),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_user', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-is_active'],
            },
            managers=[
                ('objects', core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(default='')),
                ('option1', models.TextField(default='')),
                ('option2', models.TextField(default='')),
                ('option3', models.TextField(default='')),
                ('option4', models.TextField(default='')),
                ('option5', models.TextField(default='')),
                ('answer', models.IntegerField(default=0)),
                ('explain', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='ReadQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_question_question', to='core.question')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_question_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ReadQuestion',
                'verbose_name_plural': 'ReadQuestions',
                'db_table': 'read_question',
            },
        ),
        migrations.CreateModel(
            name='FavoriteQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fav_question_question', to='core.question')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fav_question_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'FavoriteQuestion',
                'verbose_name_plural': 'FavoriteQuestions',
                'db_table': 'favorite_question',
            },
        ),
    ]
